/////////////////////////////////////////////////////////////////////////////////////////////////
//////                         Variables, mutability and shadowing                         //////
/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////
//////                                     Data Types                                      //////
/////////////////////////////////////////////////////////////////////////////////////////////////

// reverse the tuple provided using destructuring and return the new tuple
pub fn reverse_tuple(tup: (u32, u32, u32)) -> (u32, u32, u32) {
    todo!()
}

// reverse the tuple provided using destructuring and return the new tuple using shadowing
pub fn reverse_tuple(tup: (u32, u32, u32)) -> (u32, u32, u32) {
    let response = tup;
    todo!()
}

// this function return an array where every element of the array provided as argument is incremented by 10
pub fn array_add_10(arr: [u32; 5]) -> [u32; 5] {
    todo!()
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//////                                     Else if                                         //////
/////////////////////////////////////////////////////////////////////////////////////////////////

// //conditional with array

// this function returns the  print if the number is divisible by 2, 3, 4, 5, the first part of this function is provide
pub fn is_divisible_by_two_three_five(number: u32) -> u32 {
    if number % 2 == 0 {
        println!("the number is divisble by two")
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//////                                     Loops                                           //////
/////////////////////////////////////////////////////////////////////////////////////////////////



